# -*- mode: ruby -*-
#
# Vagrantfile - One development machine to rule them all.
#


require 'json'


# Provisioning might need updating for different Ubuntu
# releases, see the "provision.sh" script for details...
ubuntu_release = "24.04"
ubuntu_codenames = {
    "16.04" => "xenial",
    "18.04" => "bionic",
    "20.04" => "focal",
    "22.04" => "jammy",
    "24.04" => "noble",
}


# This is the minimum customization necessary but, to tailor this configuration
# to a specific project, you should also edit the "vagrant/provision.sh" script...
vm_name = "Generic Ubuntu #{ubuntu_release} (#{ubuntu_codenames[ubuntu_release]})"
vm_hostname = "vagrant-ubuntu-#{ubuntu_codenames[ubuntu_release]}"
vm_size = {"cpus" => 1, "memory" => 1024}

if ubuntu_release.to_i >= 24
    vm_box = "carlosefr/ubuntu-#{ubuntu_release}"
else
    vm_box = "ubuntu/#{ubuntu_codenames[ubuntu_release]}64"
end

vm_box_version = nil

install_system_updates = false

# Attach an extra disk if the VM defaults aren't enough...
extra_disk_enabled = false
extra_disk_size_gb = 10
extra_disk_mount_point = "/srv/data"

# Location of the external files used by this script...
vagrant_assets = File.dirname(__FILE__) + "/vagrant"


# Someone may need to (locally) override the VM size for some specific task...
vm_size_override = File.dirname(__FILE__) + "/.vagrant_size.json"
if File.exist?(vm_size_override)
    vm_size = JSON.parse(File.read(vm_size_override))
end


Vagrant.configure(2) do |config|
    config.vm.box = vm_box
    config.vm.box_version = vm_box_version.nil? ? vm_box_version : ">= 0"
    config.vm.hostname = vm_hostname

    # We prefer the shared folder to be inside the user's home (below)...
    config.vm.synced_folder ".", "/vagrant", disabled: true

    if install_system_updates
        config.vm.provision "shell", path: "#{vagrant_assets}/updates.sh", reboot: true,
                                     privileged: false  # ...run as the "vagrant" user.
    end

    # Provision the extra disk early, as it may be required by other provisioners...
    if extra_disk_enabled && extra_disk_size_gb > 0
        config.vm.provision "shell", path: "#{vagrant_assets}/extradisk.sh",
                                     args: [extra_disk_mount_point],
                                     privileged: false  # ...run as the "vagrant" user.
    end

    # Support git operations inside the VM...
    if File::exist?(File::expand_path("~/.gitconfig"))
        config.vm.provision "file", source: "~/.gitconfig", destination: "~/.gitconfig"
    end

    # Make the local user's SSH public keys reachable by the main provisioning script...
    Dir::chdir(File::expand_path("~/.ssh")) do
        Dir::glob("*.pub").each do |pubkey|
            config.vm.provision "file", source: File::join("~/.ssh", pubkey), destination: "/tmp/"
        end
    end

    # Try to obtain the proper timezone on macOS (e.g. "Europe/Lisbon" instead of "WET")...
    if File.symlink?("/etc/localtime")
        host_timezone = File.readlink("/etc/localtime")[/zoneinfo\/(.+)/, 1]
    else
        host_timezone = Time.now.zone
    end

    # Perform base-system customizations and install project-specific dependencies...
    config.vm.provision "shell", path: "#{vagrant_assets}/provision.sh",
                                 env: {"HOST_TIMEZONE" => host_timezone},
                                 privileged: false,  # ...run as the "vagrant" user.
                                 binary: true  # ...don't convert to CRLF on Windows.

    config.vm.post_up_message = "VM available from the host at: #{vm_hostname}.local"

    config.ssh.forward_agent = true
    config.ssh.keep_alive = true

    config.vm.provider "virtualbox" do |vm, override|
        vm.name = vm_name
        vm.gui = false

        vm.memory = vm_size["memory"]
        vm.cpus = vm_size["cpus"]
        vm.default_nic_type = "virtio"

        # The guest additions are already built-in...
        if Vagrant.has_plugin?("vagrant-vbguest")
            override.vbguest.auto_update = false
            override.vbguest.allow_downgrade = false
        end

        #
        # Resolve names using the host's configured DNS resolvers, but hide their actual IP
        # addresses from the guest (useful if they come from DHCP and are subject to change).
        #
        # It is sometimes useful to use "--natdnshostresolver1" instead, to use the host's
        # stub resolver APIs (i.e. when using VPN software that hijacks DNS resolution), but
        # beware that this comes with some caveats (e.g. musl doesn't deal with it very well).
        #
        vm.customize ["modifyvm", :id, "--natdnsproxy1", "on"]

        # No need for audio in a server-type VM...
        vm.customize ["modifyvm", :id, "--audio", "none"]

        # Override the console log location set by the base box...
        console_log_file = File.join(vagrant_assets, "ubuntu-#{ubuntu_release}-console.log")
        vm.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
        vm.customize ["modifyvm", :id, "--uartmode1", "file", console_log_file]

        # Expose the VM to the host instead of forwarding many ports individually
        # for complex projects. The provisioning script will setup Avahi/mDNS to
        # make the guest VM easily accessible through a "*.local" domain...
        override.vm.network "private_network", type: "dhcp", name: Vagrant::Util::Platform.windows? ? nil : "vboxnet0"

        # Even though we set the default NIC type above, it doesn't seem to always apply...
        vm.customize ["modifyvm", :id, "--nictype1", "virtio"]
        vm.customize ["modifyvm", :id, "--nictype2", "virtio"]

        # Make the current directory visible (and editable) inside the VM...
        override.vm.synced_folder ".", "/home/vagrant/shared", SharedFoldersEnableSymlinksCreate: false

        if extra_disk_enabled && extra_disk_size_gb > 0
            # Figuring out where the VM resides seems to be a chicken-and-egg problem, so we use the assets directory...
            extra_disk_file = File.join(vagrant_assets, "ubuntu-#{ubuntu_release}-extra-disk.vdi")

            if !File.exist?(extra_disk_file)
                vm.customize ["createmedium", "disk", "--filename", extra_disk_file,
                                                      "--format", File.extname(extra_disk_file).gsub(/^\./, "").upcase,
                                                      "--variant", "Standard", "--size", extra_disk_size_gb * 1024]
            end

            # The disk only needs to be attached once...
            vm.customize ["storageattach", :id , "--storagectl", "SCSI",  # ...as named by the base box.
                                                 "--port", "15",  # ...highest port to avoid collisions.
                                                 "--device", "0", "--type", "hdd", "--medium", extra_disk_file]
        end
    end
end


# vim: set expandtab ts=4 sw=4 ft=ruby:
